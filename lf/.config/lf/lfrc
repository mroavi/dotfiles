# Documentation:
# - https://godoc.org/github.com/gokcehan/lf

# Example lfrc (by gokcehan):
# - https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

# Example lfrc (by Brodie Robertson):
# - https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc

# -----------------------------------------------------------------------------
# Config
# -----------------------------------------------------------------------------

# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Create trash dir (`-p`: no error if existing, make parent directories as needed)
$mkdir -p ~/.trash

# -----------------------------------------------------------------------------
# Options
# -----------------------------------------------------------------------------
set previewer '~/dotfiles/lf/.config/lf/pv.sh'
set preview
set drawbox
set icons
set ignorecase

# -----------------------------------------------------------------------------
# Custom commands
# -----------------------------------------------------------------------------

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

cmd mkdir %mkdir "$1"
cmd touch %touch "$1"

# fasd integration
cmd fasd ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

# Open with $EDITOR or xdg-open based on type of file
# Note: this command is hijacked (redefined) when using nvim's lf plugin,
# meaning that this command is only used if lf is opened from the terminal
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# When using nvim's lf plugin, use this command (which is mapped to `o`) to
# open a file with xdg-open (the default `open` command gets hijacked
# (redefined)) and use `l` or `Enter` to open text files
cmd myopen ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Batch rename selected files using external program vimv
cmd batch_rename ${{
  /bin/sh -c "vimv $(echo -e "$fx" | xargs -i echo "\\'{}\\'" | xargs echo)"
}}

# # extract the current file with the right command
# # (xkcd link: https://xkcd.com/1168/)
# cmd extract ${{
#     set -f
#     case $f in
#         *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
#         *.tar.gz|*.tgz) tar xzvf $f;;
#         *.tar.xz|*.txz) tar xJvf $f;;
#         *.zip) unzip $f;;
#         *.rar) unrar x $f;;
#         *.7z) 7z x $f;;
#     esac
# }}

# # compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}

# # compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

# -----------------------------------------------------------------------------
# Mappings
# -----------------------------------------------------------------------------
# Remove some default mappings
map d
map v

# Mappings
map dd        trash
map <delete>  delete
map y         copy
map x         cut
map p         paste
map f         find
map r         rename
map V         toggle
map u         unselect
map <esc>     quit
map .         set hidden!
map ~         cd ~
map <enter>   open
map o         myopen
map z         fasd
# Delete c and w mappings
map c
map w
# Now that c and w are cleared, map cl and cw
map cl      :clear; unselect
map cw      batch_rename

