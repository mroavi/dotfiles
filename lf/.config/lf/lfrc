# Documentation:
# - https://godoc.org/github.com/gokcehan/lf

# [1] Example lfrc (by gokcehan):
# - https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

# [2] Example lfrc (by Brodie Robertson):
# - https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc

# -----------------------------------------------------------------------------
# Config
# -----------------------------------------------------------------------------

# See [1] for descriptions of these settings
set shell sh 
set shellopts '-eu'
set ifs "\n"

# -----------------------------------------------------------------------------
# Options
# -----------------------------------------------------------------------------

set previewer pistol
# set previewer '~/dotfiles/lf/.config/lf/pv.sh'
# set previewer '~/dotfiles/lf/.config/lf/scope.sh'

set preview
set drawbox
set icons
set ignorecase

# -----------------------------------------------------------------------------
# Custom commands
# -----------------------------------------------------------------------------

# Uses trash-cli to move selected files/dirs to the trash
cmd trash %trash-put $fx

# Uses fzf and trash-cli to restore the selected files
# https://github.com/gokcehan/lf/issues/579
# https://linuxhint.com/print-columns-awk/ (source for first awk below)
cmd fzf-restore ${{
    ids="$(echo -ne '\n'              | \
      trash-restore                   | \
      awk '$1 ~ /^[0-9]+/ {print $0}' | \
      fzf --multi                     | \
      awk '{print $1}'                | \
      sed -z 's/\n/,/g;s/,$/\n/')"
    echo $ids | trash-restore 
    clear
}}

# Creates a file with the argument as name and selects it
cmd touch %{{
    touch -- "$*"
    lf -remote "send $id select \"$*\""
}}

# Creates a file with the argument as name and opens it
cmd v %{{
    touch -- "$*"
    lf -remote "send $id select \"$*\""
    lf -remote "send $id open"
}}

# Creates a directory and selects it
cmd mkdir %{{
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd touch %touch "$1"

# fasd integration
cmd fasd ${{
    res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
      cmd="cd"
    else
      cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

# Open with $EDITOR or xdg-open based on type of file
# Note: this command is hijacked (redefined) when using nvim's lf plugin,
# meaning that this command is only used if lf is opened from the terminal
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# When using nvim's lf plugin, use this command (which is mapped to `o`) to
# open a file with xdg-open (the default `open` command gets hijacked
# (redefined)) and use `l` or `Enter` to open text files
cmd myopen ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.gz) tar xf $f --one-top-level=$(basename $fx .tar.gz);; # mrv: extract to newly created dir
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# # compress current file or selected files with tar and gunzip
# cmd tar ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     tar czf $1.tar.gz $1
#     rm -rf $1
# }}

# # compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

# -----------------------------------------------------------------------------
# Mappings
# -----------------------------------------------------------------------------

# Remove some default mappings
map d # default: cut
map v # default: invert
map u # default: unselect
map c # default: clear

# Mappings
map dd            trash
map DD            delete
map u             fzf-restore
map y             copy
map x             cut
map p             paste
map f             find
map r             rename
# https://github.com/gokcehan/lf/wiki/Tips#bulk-rename-multiple-files
map R             $printf '%s\n' $fx | vidir -
map V             toggle
map <esc>         quit
map .             set hidden!
map ~             cd ~
map <enter>       open
map o             myopen
map z             fasd
map <backspace2> :clear; unselect
map e             extract
