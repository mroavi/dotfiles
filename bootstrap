#!/bin/bash

# Save current directory
currentdir="$PWD"

# Ensure these dirs exist
mkdir -p ~/.local
mkdir -p ~/Downloads

# -----------------------------------------------------------------------------------------
echo "Installing stow..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed stow
else
  FILE=$HOME/.local/bin/stow
  if [ -f "$FILE" ]; then
    echo " stow is already installed"
  else
    # See INSTALL.md in root dir
    LOCAL_REPO=~/Downloads/stow
    REPO_URL=https://git.savannah.gnu.org/git/stow.git
    git clone "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
    cd $LOCAL_REPO
    autoreconf -iv
    ./configure --prefix=$HOME/.local
    make install
  fi
fi

# -----------------------------------------------------------------------------------------
echo "Installing nvim..."

if [ ! "$SSH_CONNECTION" ]; then
  yay -S --needed neovim-nightly-bin
else
  # Local installation
  # https://github.com/neovim/neovim/wiki/Installing-Neovim#appimage-universal-linux-package
  FILE=$HOME/.local/bin/nvim
  if [ -f "$FILE" ]; then
    echo " nvim is already installed"
  else
    mkdir -p ~/.local/bin && cd ~/.local/bin
  #    curl -LO https://github.com/neovim/neovim/releases/download/stable/nvim.appimage
    curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    chmod u+x nvim.appimage
    mv nvim.appimage nvim
  fi
fi
pip3 install pynvim

# -----------------------------------------------------------------------------------------
echo "Installing vim-plug for nvim..."

sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

# -----------------------------------------------------------------------------------------
echo "Installing neovim plugins..."

# https://github.com/junegunn/vim-plug/wiki/tips#install-plugins-on-the-command-line
nvim -es -u ~/dotfiles/nvim/.config/nvim/init.vim -i NONE -c "PlugInstall" -c "qa"

# -----------------------------------------------------------------------------------------
echo "Installing zsh..."

if [ "$SSH_CONNECTION" ]; then
  # Build locally (needed when root access is not available)
  # https://stackoverflow.com/a/15293565/1706778
  FILE=$HOME/.local/bin/zsh
  if [ -f "$FILE" ]; then
    echo " zsh is already installed"
  else
    cd ~/Downloads
    wget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download
    mkdir zsh && unxz zsh.tar.xz && tar -xvf zsh.tar -C zsh --strip-components 1
    cd zsh
    ./configure --prefix=$HOME/.local
    make
    make install
  fi
else
  sudo pacman -S --needed zsh
fi

# -----------------------------------------------------------------------------------------
echo "Installing autosuggestions..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed zsh-autosuggestions
else
  mkdir -p ~/.local/share/zsh/plugins
  LOCAL_REPO=$HOME/.local/share/zsh/plugins/zsh-autosuggestions
  REPO_URL=https://github.com/zsh-users/zsh-autosuggestions.git
  git clone "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
fi

# -----------------------------------------------------------------------------------------
echo "Installing zsh-syntax-highlighting..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed zsh-syntax-highlighting
else
  LOCAL_REPO=$HOME/.local/share/zsh/plugins/zsh-syntax-highlighting
  REPO_URL=https://github.com/zsh-users/zsh-syntax-highlighting.git
  git clone "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
fi

# -----------------------------------------------------------------------------------------
echo "Installing Powerlevel10k..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed zsh-theme-powerlevel10k
else
  mkdir -p ~/.local/share/zsh/themes
  LOCAL_REPO=$HOME/.local/share/zsh/themes/powerlevel10k
  REPO_URL=https://github.com/romkatv/powerlevel10k.git
  git clone --depth=1 "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
fi

# -----------------------------------------------------------------------------------------
echo "Installing Fonts..."
# To see installed mono fonts:
# fc-list :scalable=true:spacing=mono: family

mkdir -p ~/.local/share/fonts && cd ~/.local/share/fonts

# Hack Nerd Font
# https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts
filepath=Hack-for-Powerline-Nerd-Font-regular-complete.ttf
[ -f $filepath ] || curl -fLo "$filepath" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Hack/Regular/complete/Hack%20Regular%20Nerd%20Font%20Complete.ttf
filepath=Hack-for-Powerline-Nerd-Font-bold-complete.ttf
[ -f $filepath ] || curl -fLo "$filepath" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Hack/Bold/complete/Hack%20Bold%20Nerd%20Font%20Complete.ttf
filepath=Hack-for-Powerline-Nerd-Font-italic-complete.ttf
[ -f $filepath ] || curl -fLo "$filepath" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Hack/Italic/complete/Hack%20Italic%20Nerd%20Font%20Complete.ttf
filepath=Hack-for-Powerline-Nerd-Font-bold-italic-complete.ttf
[ -f $filepath ] || curl -fLo "$filepath" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/Hack/BoldItalic/complete/Hack%20Bold%20Italic%20Nerd%20Font%20Complete.ttf

# Awesome Terminal font
# https://github.com/gabrielelana/awesome-terminal-fonts/tree/patching-strategy/patched
filepath=Droid-Sans-Mono-Awesome.ttf
[ -f $filepath ] || curl -fLo "$filepath" https://github.com/gabrielelana/awesome-terminal-fonts/raw/patching-strategy/patched/Droid%2BSans%2BMono%2BAwesome.ttf

# -----------------------------------------------------------------------------------------
# https://github.com/BurntSushi/ripgrep#installation
echo "Installing ripgrep..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed ripgrep
fi

# -----------------------------------------------------------------------------------------
# https://computingforgeeks.com/bat-cat-command-with-syntax-highlighting-and-git-integration/
echo "Installing bat..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed bat
fi

## -----------------------------------------------------------------------------------------
# https://github.com/clvv/fasd
echo "Installing fasd..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed fasd
else
  FILE=$HOME/.local/bin/fasd
  if [ -f "$FILE" ]; then
    echo " fasd is already installed"
  else
    LOCAL_REPO=~/repos/fasd
    REPO_URL=git@github.com:clvv/fasd.git
    git clone "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
    cd $LOCAL_REPO
    PREFIX="$HOME/.local" make install
  fi
fi

# -----------------------------------------------------------------------------------------
echo "Installing lf..."

if [ ! "$SSH_CONNECTION" ]; then
  yay -S --needed lf
else
  FILE=$HOME/.local/bin/lf
  if [ -f "$FILE" ]; then
    echo "lf is already installed"
  else
    cd ~/Downloads/
    filename="lf.tar.gz"
    wget -O $filename https://github.com/gokcehan/lf/releases/download/r18/lf-linux-amd64.tar.gz
    tar xvzf "$filename" -C $HOME/.local/bin/
  fi
fi

# -----------------------------------------------------------------------------------------
echo "Installing diff-so-fancy..."

if [ ! "$SSH_CONNECTION" ]; then
  sudo pacman -S --needed diff-so-fancy
else
  FILE=$HOME/.local/bin/diff-so-fancy
  if [ -f "$FILE" ]; then
    echo "diff-so-fancy is already installed"
  else
    LOCAL_REPO=~/Downloads/diff-so-fancy
    REPO_URL=git@github.com:so-fancy/diff-so-fancy.git
    git clone "$REPO_URL" "$LOCAL_REPO" 2> /dev/null || git -C "$LOCAL_REPO" pull
    cp $LOCAL_REPO/diff-so-fancy $HOME/.local/bin/
    cp -r $LOCAL_REPO/lib $HOME/.local/bin/
  fi
fi

# -----------------------------------------------------------------------------------------
# LSP servers
# -----------------------------------------------------------------------------------------

echo "Installing clangd..."

FILE=$HOME/.local/bin/clangd
if [ -f "$FILE" ]; then
  echo " clangd is already installed"
else
  cd ~/Downloads/
  filepath="clangd-linux-10.0.0.zip"
  [ -f $filepath ] || curl -fLo "$filepath" https://github.com/clangd/clangd/releases/download/10.0.0/clangd-linux-10.0.0.zip
  unzip "$filepath"
  cp clangd_10.0.0/bin/clangd $HOME/.local/bin
  cp -r clangd_10.0.0/lib/clang $HOME/.local/lib
fi

# -----------------------------------------------------------------------------------------
echo "Installing texlab..."

FILE=$HOME/.local/bin/texlab
if [ -f "$FILE" ]; then
  echo " texlab is already installed"
else
  cd ~/Downloads/
  filepath="texlab-x86_64-linux.tar.gz"
  [ -f $filepath ] || curl -fLo "$filepath" https://github.com/latex-lsp/texlab/releases/download/v2.2.0/texlab-x86_64-linux.tar.gz
  tar xvzf "$filepath" -C $HOME/.local/bin/
fi

# -----------------------------------------------------------------------------------------
# TODO: install LUA server: 
# https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)

# -----------------------------------------------------------------------------------------
# Return to original directory
cd "$currentdir"

