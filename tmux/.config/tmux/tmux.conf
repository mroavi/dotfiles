# -----------------------------------------------------------------------------
# Genral options
# -----------------------------------------------------------------------------

# Enumerate windows starting from 1
set -g base-index 1

# Enable 256-colors
set -g default-terminal 'tmux-256color'
set -ga terminal-overrides ',*256col*:Tc'

# Set window notifications
set -g monitor-activity on
set -g visual-activity off

# Allows for faster key repetition
set -g repeat-time 0

# Toggle synchronization
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Increase history limit
set -g history-limit 10000

# Forward Shift+{key} to the terminal
# https://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
set -gw xterm-keys on

# Enable FocusGained and FocusLost autocommand events in terminal vim
# https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Flash message in status bar instead of making a bell sound:
set -g visual-bell on

# Reload tmux config
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# No delay for escape key press
set -sg escape-time 0

# Re-number windows sequentially after closing any of them
set -g renumber-windows on

# Set vi key-bindings
set -g status-keys vi
set -g mode-keys vi
# Enter vi copy mode with Ctrl+b+b (or the default Ctrl+b+[)
#bind C-b copy-mode

# -----------------------------------------------------------------------------
# copy-mode-vi
# -----------------------------------------------------------------------------

# Exit vi copy mode with Escape
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Yank to tmux buffer AND clipboard in vi mode
# https://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
bind p paste-buffer
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi r send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -sel clip -i"

# -----------------------------------------------------------------------------
# Mouse
# -----------------------------------------------------------------------------

# https://unix.stackexchange.com/questions/348913/copy-selection-to-a-clipboard-in-tmux
set -g mouse on
set -s set-clipboard off
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -se c -i"

# https://stackoverflow.com/questions/31404140/can-i-use-double-click-to-select-and-copy-in-tmux
# Double LMB Select & Copy (Word)
bind -T copy-mode-vi DoubleClick1Pane \
  select-pane \; \
  send-keys -X select-word-no-clear \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"
bind -n DoubleClick1Pane \
  select-pane \; \
  copy-mode -M \; \
  send-keys -X select-word \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"

# Triple LMB Select & Copy (Line)
bind -T copy-mode-vi TripleClick1Pane \
  select-pane \; \
  send-keys -X select-line \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"
bind -n TripleClick1Pane \
  select-pane \; \
  copy-mode -M \; \
  send-keys -X select-line \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"


# Create a session if one does not already exist when running "tmux attach"
# Note: moving this line messes up ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE color
# https://unix.stackexchange.com/questions/103898/how-to-start-tmux-with-attach-if-a-session-exists
new-session -n $HOST

# -----------------------------------------------------------------------------
# Status-line
# -----------------------------------------------------------------------------

# Source .tmux.conf.statusline if it exists (generated with tmuxline.vim plugin)
if-shell "test -f ~/.config/tmux/tmux.conf.statusline" "source ~/.config/tmux/tmux.conf.statusline"

# -----------------------------------------------------------------------------
# Windows
# -----------------------------------------------------------------------------

# New window
bind c new-window -n ''
bind -n C-M-n new-window -n ''

# Ctrl+Alt+{h,l} to switch windows
bind -n C-M-h previous-window
bind -n C-M-l next-window

# Ctrl-(Shift)-Tab to switch windows
bind -n C-S-Tab previous-window
bind -n C-Tab next-window

# -----------------------------------------------------------------------------
# Panes
# -----------------------------------------------------------------------------

# Use Ctrl+Shift+{j,k,h,l} to resize the pane by 3
bind -n C-S-4 resize-pane -D 3
bind -n C-S-5 resize-pane -U 3
bind -n C-S-6 resize-pane -L 3
bind -n C-S-7 resize-pane -R 3

# Smart pane switching with awareness of Vim splits, FZF and ssh
# https://github.com/christoomey/vim-tmux-navigator
# https://github.com/christoomey/vim-tmux-navigator/issues/188
# https://github.com/gfontenot/dotfiles/blob/master/tmux.conf#L94-L104

# view, (n)vim, FZF, or ssh instance focused?
forward_programs="view|n?vim?|fzf|ssh"
should_forward="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forward_programs)(diff)?$'"

# Vim split navigation if Vim is focused, otherwise tmux pane navigation
bind -n 'C-h' if-shell "$should_forward" 'send-keys C-h'  'select-pane -L'
bind -n 'C-j' if-shell "$should_forward" 'send-keys C-j'  'select-pane -D'
bind -n 'C-k' if-shell "$should_forward" 'send-keys C-k'  'select-pane -U'
bind -n 'C-l' if-shell "$should_forward" 'send-keys C-l'  'select-pane -R'

# Kill pane
# bind x kill-pane
bind x confirm-before -p 'Kill pane (y/N)?' kill-pane
# Alternative mapping: Forward Ctrl+Shift+w to Vim if focused, otherwise kill tmux pane (hack: Ctrl+Shift+0)
bind -n 'C-S-0' if-shell "$should_forward" 'send-keys C-S-0' 'kill-pane'

# Enable the mappings above in vi copy mode (Ctrl+b [) as well
bind -T copy-mode-vi 'C-h' select-pane -L
bind -T copy-mode-vi 'C-j' select-pane -D
bind -T copy-mode-vi 'C-k' select-pane -U
bind -T copy-mode-vi 'C-l' select-pane -R
bind -T copy-mode-vi 'C-S-0' kill-pane

# ssh instance focused?
forward_programs="ssh"
should_forward="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forward_programs)(diff)?$'"

# Split tmux window
bind 'v' split-window -h
bind 's' split-window -v
# Alternative mapping: Forward Ctrl+Shift+1 and Ctrl+Shift+2 to ssh if focused, otherwise split tmux window
# (hack: we expect `Ctrl+Shift+1` and `Ctrl+Shift+2` X codes from the terminal)
bind -n 'C-S-1' if-shell "$should_forward" 'send-keys C-S-1'  'split-window -v -c "#{pane_current_path}"'
bind -n 'C-S-2' if-shell "$should_forward" 'send-keys C-S-2'  'split-window -h -c "#{pane_current_path}"'

# # =============================================================================
# # PLUGINS (prefix + I to install the plugins listed below )
# # =============================================================================

# # Automatically install tpm on a new machine
# if "test ! -d ~/.tmux/plugins/tpm" \
#   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# # tmux-resurrect (save/restore sessions)
# set -g @plugin 'tmux-plugins/tmux-resurrect'


# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run -b '~/.tmux/plugins/tpm/tpm'
