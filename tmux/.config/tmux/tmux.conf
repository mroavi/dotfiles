# -----------------------------------------------------------------------------
## General
# -----------------------------------------------------------------------------

# Always send extended key sequences
set -g extended-keys always

# Enable 256-colors
set -g default-terminal 'tmux-256color'
set -ga terminal-overrides ',*256col*:Tc'

# Allows for faster key repetition
set -g repeat-time 0

# No delay for escape key press
set -sg escape-time 0

# Increase history limit
set -g history-limit 10000

# Forward Shift+{key} to the terminal
# https://superuser.com/questions/401926/how-to-get-shiftarrows-and-ctrlarrows-working-in-vim-in-tmux
set -gw xterm-keys on

# Enable FocusGained and FocusLost autocommand events in terminal vim
# https://github.com/tmux-plugins/vim-tmux-focus-events
set -g focus-events on

# Set emacs-style key bindings in the command prompt (this allows to cancel with ESC)
set -g status-keys emacs

# Reload tmux config
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# Enumerate windows starting from 1
set -g base-index 1

# Re-number windows sequentially after closing any of them
set -g renumber-windows on

# Set window notifications
set -g monitor-activity on
set -g visual-activity off

# Flash message in status bar instead of making a bell sound
set -g visual-bell on

# -----------------------------------------------------------------------------
## Appearence
# -----------------------------------------------------------------------------

# Source .tmux.conf.statusline if it exists (generated with tmuxline.vim plugin)
if-shell "test -f ~/.config/tmux/tmux.conf.statusline" "source ~/.config/tmux/tmux.conf.statusline"

# DISABLE STATUS BAR
set -g status off

# -----------------------------------------------------------------------------
## Copy-mode-vi
# -----------------------------------------------------------------------------

# Set vi-style key bindings in copy-mode
set -g mode-keys vi

# Exit vi copy mode with Escape
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Convenient bindings to scroll half-page up/down
bind-key -T copy-mode-vi d send-keys -X halfpage-down
bind-key -T copy-mode-vi u send-keys -X halfpage-up

# Yank to tmux buffer AND clipboard in vi mode
# https://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
bind P paste-buffer
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection-and-cancel
bind -T copy-mode-vi r send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -sel clip -i"

# Enter vi copy mode with Ctrl+b+b (or the default Ctrl+b+[)
#bind C-b copy-mode

# -----------------------------------------------------------------------------
## Mouse
# -----------------------------------------------------------------------------

# https://unix.stackexchange.com/questions/348913/copy-selection-to-a-clipboard-in-tmux
set -g mouse on
set -s set-clipboard off
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -se c -i"

# https://stackoverflow.com/questions/31404140/can-i-use-double-click-to-select-and-copy-in-tmux
# Double LMB Select & Copy (Word)
bind -T copy-mode-vi DoubleClick1Pane \
  select-pane \; \
  send-keys -X select-word-no-clear \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"
bind -n DoubleClick1Pane \
  select-pane \; \
  copy-mode -M \; \
  send-keys -X select-word \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"

# Triple LMB Select & Copy (Line)
bind -T copy-mode-vi TripleClick1Pane \
  select-pane \; \
  send-keys -X select-line \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"
bind -n TripleClick1Pane \
  select-pane \; \
  copy-mode -M \; \
  send-keys -X select-line \; \
  run-shell "sleep .15s" \; \
  send-keys -X copy-pipe-and-cancel "xclip -in -sel clip"

# -----------------------------------------------------------------------------
## Windows
# -----------------------------------------------------------------------------

# # Alt+{h,l} to switch windows
# bind -n M-h previous-window
# bind -n M-l next-window

# # Create nameless window
# bind c new-window -n ''

# -----------------------------------------------------------------------------
## Panes
# -----------------------------------------------------------------------------

# Split tmux window
bind 'Enter' split-window -h -c "#{pane_current_path}"
bind 'J' split-window -v -c "#{pane_current_path}"

# Switch focus to next/prev pane
bind -T prefix j select-pane -t :.+
bind -T prefix k select-pane -t :.-

# Kill pane
bind x kill-pane

# Use Ctrl+Shift+{j,k,h,l} to resize the pane by 3
bind -n C-S-J resize-pane -D 3
bind -n C-S-K resize-pane -U 3
bind -n C-S-H resize-pane -L 3
bind -n C-S-L resize-pane -R 3

# =============================================================================
## Sessions
# =============================================================================

# Create a session if one does not already exist when running "tmux attach"
# Note: moving this line messes up ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE color
# https://unix.stackexchange.com/questions/103898/how-to-start-tmux-with-attach-if-a-session-exists

# new-session -n $HOST

# This is a neat trick, but there is a caveat: if tmux is invoked without
# arguments, it will create a new session and then create a second session as
# soon it reaches this line in your ~/.tmux.conf

# =============================================================================
## SSH specific configuration
# =============================================================================

forard_programs_list="ssh"
should_forward="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?($forard_programs_list)(diff)?$'"

# Emulate an Alt prefix (forward keys when in a SSH connection)
bind -n M-w if-shell "$should_forward" 'send-keys C-b w' 'resize-pane -Z \; choose-tree -w'
bind -n M-c if-shell "$should_forward" 'send-keys C-b c' 'new-window'
bind -n M-p if-shell "$should_forward" 'send-keys C-b p' 'previous-window'
bind -n M-n if-shell "$should_forward" 'send-keys C-b n' 'next-window'
bind -n M-l if-shell "$should_forward" 'send-keys C-b l' 'last-window'
bind -n M-j if-shell "$should_forward" 'send-keys C-b j' 'select-pane -t :.+'
bind -n M-k if-shell "$should_forward" 'send-keys C-b k' 'select-pane -t :.-'
bind -n M-x if-shell "$should_forward" 'send-keys C-b x' 'kill-pane'
bind -n M-z if-shell "$should_forward" 'send-keys C-b z' 'resize-pane -Z'
bind -n M-[ if-shell "$should_forward" 'send-keys C-b [' 'copy-mode'
bind -n M-_ if-shell "$should_forward" 'send-keys C-b "' 'split-window -v -c "#{pane_current_path}"'
bind -n M-'Enter' if-shell "$should_forward" 'send-keys C-b %' 'split-window -h -c "#{pane_current_path}"'
bind -n C-S-J if-shell "$should_forward" 'send-keys C-b C-Down' 'resize-pane -D 3'
bind -n C-S-K if-shell "$should_forward" 'send-keys C-b C-Up' 'resize-pane -U 3'
bind -n C-S-H if-shell "$should_forward" 'send-keys C-b C-Left' 'resize-pane -L 3'
bind -n C-S-L if-shell "$should_forward" 'send-keys C-b C-Right' 'resize-pane -R 3'

# =============================================================================
## Plugins (prefix + I to install the plugins listed below )
# =============================================================================

# Automatically install tpm on a new machine
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# tmux-resurrect (save/restore sessions)
set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @resurrect-capture-pane-contents 'on'
# set -g @resurrect-strategy-nvim 'session'
# set -g @resurrect-processes '~julia'


# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

# vim:set nowrap:
